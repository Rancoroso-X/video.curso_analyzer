#!/usr/bin/env python3
"""
üéì SISTEMA ORQUESTRADO COMPLETO - NASCO v4.0 ULTIMATE
Processa TUDO: Transcri√ß√£o ‚Üí Documentos ‚Üí IA com progresso avan√ßado
"""

import streamlit as st
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import json
import traceback


class ProcessingLogger:
    """Sistema de logs avan√ßado com interface visual."""

    def __init__(self):
        if 'processing_logs' not in st.session_state:
            st.session_state.processing_logs = []

    def log(self, level: str, message: str, details: str = None):
        """Adiciona log com timestamp."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = {
            'timestamp': timestamp,
            'level': level,
            'message': message,
            'details': details
        }
        st.session_state.processing_logs.append(log_entry)

        # Manter apenas √∫ltimos 100 logs
        if len(st.session_state.processing_logs) > 100:
            st.session_state.processing_logs = st.session_state.processing_logs[-100:]

    def info(self, message: str, details: str = None):
        self.log("INFO", message, details)

    def warning(self, message: str, details: str = None):
        self.log("WARNING", message, details)

    def error(self, message: str, details: str = None):
        self.log("ERROR", message, details)

    def success(self, message: str, details: str = None):
        self.log("SUCCESS", message, details)

    def render_logs(self):
        """Renderiza logs na interface."""
        if not st.session_state.processing_logs:
            return

        st.markdown("### üìã Logs de Processamento")

        # Container scroll√°vel para logs
        with st.container():
            # √öltimos 20
            for log in reversed(st.session_state.processing_logs[-20:]):
                level_colors = {
                    'INFO': 'üîµ',
                    'SUCCESS': '‚úÖ',
                    'WARNING': '‚ö†Ô∏è',
                    'ERROR': '‚ùå'
                }

                icon = level_colors.get(log['level'], 'üìù')
                st.text(f"{icon} {log['timestamp']} - {log['message']}")

                if log['details']:
                    st.caption(f"   ‚îî‚îÄ {log['details']}")

    def clear_logs(self):
        """Limpa todos os logs."""
        st.session_state.processing_logs = []


class AdvancedProgressTracker:
    """Rastreador de progresso avan√ßado com estimativas de tempo."""

    def __init__(self, total_phases: int = 4):
        self.total_phases = total_phases
        self.current_phase = 1
        self.phase_names = {
            1: "üîç An√°lise Inicial",
            2: "üéôÔ∏è Transcri√ß√£o de V√≠deos",
            3: "üìÑ Processamento de Documentos",
            4: "üß† An√°lise de IA"
        }
        self.start_time = time.time()
        self.phase_start_time = time.time()

        # Containers para UI
        self.main_progress_container = st.empty()
        self.phase_progress_container = st.empty()
        self.details_container = st.empty()
        self.eta_container = st.empty()

    def start_phase(self, phase_num: int, total_items: int = 0):
        """Inicia uma nova fase."""
        self.current_phase = phase_num
        self.phase_start_time = time.time()
        self.total_items = total_items
        self.completed_items = 0

    def update_phase_progress(self, completed: int, current_item: str = "", eta_seconds: int = 0):
        """Atualiza progresso da fase atual."""
        self.completed_items = completed

        # Progresso geral (entre fases)
        overall_progress = (self.current_phase - 1) / self.total_phases

        # Progresso da fase atual
        if self.total_items > 0:
            phase_progress = completed / self.total_items
            overall_progress += phase_progress / self.total_phases

        # Atualizar UI
        self._render_progress(overall_progress, current_item, eta_seconds)

    def _render_progress(self, overall_progress: float, current_item: str, eta_seconds: int):
        """Renderiza interface de progresso."""

        # Barra de progresso principal
        with self.main_progress_container.container():
            st.progress(
                overall_progress, text=f"üéì PROCESSAMENTO COMPLETO: {overall_progress*100:.0f}%")

        # Progresso da fase atual
        phase_name = self.phase_names.get(
            self.current_phase, f"Fase {self.current_phase}")

        if self.total_items > 0:
            phase_progress = self.completed_items / self.total_items
            with self.phase_progress_container.container():
                st.progress(phase_progress,
                            text=f"{phase_name}: {self.completed_items}/{self.total_items}")

        # Detalhes atuais
        if current_item:
            with self.details_container.container():
                st.info(f"üîÑ Processando: {current_item}")

        # Estimativa de tempo
        if eta_seconds > 0:
            eta_str = self._format_eta(eta_seconds)
            with self.eta_container.container():
                st.caption(f"‚è±Ô∏è Tempo restante estimado: {eta_str}")

    def _format_eta(self, seconds: int) -> str:
        """Formata tempo estimado em string leg√≠vel."""
        if seconds < 60:
            return f"{seconds}s"
        elif seconds < 3600:
            minutes = seconds // 60
            secs = seconds % 60
            return f"{minutes}m {secs}s"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours}h {minutes}m"

    def complete(self):
        """Marca processamento como completo."""
        total_time = time.time() - self.start_time

        with self.main_progress_container.container():
            st.success(
                f"üéâ Processamento conclu√≠do em {self._format_eta(int(total_time))}")

        self.phase_progress_container.empty()
        self.details_container.empty()
        self.eta_container.empty()


class TimeEstimator:
    """Estimador inteligente de tempo de processamento."""

    @staticmethod
    def estimate_transcription_time(video_paths: List[str]) -> int:
        """Estima tempo de transcri√ß√£o baseado na dura√ß√£o dos v√≠deos."""
        total_seconds = 0

        for video_path in video_paths:
            try:
                # Usar ffprobe para dura√ß√£o r√°pida
                from analyzer import extrair_duracao
                duration = extrair_duracao(video_path)
                if duration:
                    # Whisper √© ~10-20% da dura√ß√£o real do v√≠deo
                    total_seconds += int(duration * 0.15)
            except:
                # Fallback: estimar 2 minutos por v√≠deo
                total_seconds += 120

        # M√≠nimo 30s por v√≠deo
        return max(total_seconds, len(video_paths) * 30)

    @staticmethod
    def estimate_ai_time(num_texts: int, avg_tokens_per_analysis: int = 600) -> int:
        """Estima tempo de an√°lise de IA."""
        # ~20-40 segundos por an√°lise dependendo do modelo e tokens
        base_time = 30  # segundos base por an√°lise
        token_time = (avg_tokens_per_analysis / 1000) * \
            10  # ~10s por 1k tokens

        # 3 an√°lises por texto
        return int(num_texts * 3 * (base_time + token_time))


def identify_missing_transcriptions(modulos_mapeados: Dict) -> List[Tuple[str, Dict]]:
    """Identifica v√≠deos que precisam de transcri√ß√£o."""
    missing = []

    for module_name, aulas_list in modulos_mapeados.items():
        for aula in aulas_list:
            if aula.get('video_path'):
                txt_path = Path(aula['video_path']).with_suffix('.txt')
                if not txt_path.exists():
                    missing.append((module_name, aula))

    return missing


def update_modulos_after_transcription(modulos_mapeados: Dict, base_path: Path) -> Dict:
    """Atualiza modulos_mapeados ap√≥s transcri√ß√£o."""
    logger = ProcessingLogger()
    logger.info("Atualizando mapeamento ap√≥s transcri√ß√£o...")

    updated_count = 0
    for module_name, aulas_list in modulos_mapeados.items():
        for aula in aulas_list:
            if aula.get('video_path'):
                txt_path = Path(aula['video_path']).with_suffix('.txt')
                if txt_path.exists() and not aula.get('txt_path'):
                    aula['txt_path'] = str(txt_path)
                    updated_count += 1

    logger.success(
        f"Mapeamento atualizado: {updated_count} novos arquivos .txt")
    return modulos_mapeados


def check_cancellation() -> bool:
    """Verifica se o usu√°rio solicitou cancelamento."""
    return st.session_state.get('cancel_processing', False)


def transcribe_videos_orchestrated(missing_transcriptions: List[Tuple[str, Dict]],
                                   progress_tracker: AdvancedProgressTracker,
                                   logger: ProcessingLogger) -> bool:
    """Transcreve v√≠deos com progresso avan√ßado."""

    if not missing_transcriptions:
        logger.info("Nenhuma transcri√ß√£o pendente")
        return True

    # Estimar tempo
    video_paths = [aula['video_path'] for _, aula in missing_transcriptions]
    estimated_time = TimeEstimator.estimate_transcription_time(video_paths)

    logger.info(
        f"Iniciando transcri√ß√£o de {len(missing_transcriptions)} v√≠deos")
    logger.info(
        f"Tempo estimado: {estimated_time//60}m {estimated_time % 60}s")

    progress_tracker.start_phase(2, len(missing_transcriptions))

    # Preparar estrutura para transcrever_videos
    items_to_transcribe = {}
    for module_name, aula in missing_transcriptions:
        if module_name not in items_to_transcribe:
            items_to_transcribe[module_name] = []
        items_to_transcribe[module_name].append(aula)

    # Transcrever com progresso manual
    completed = 0
    errors = []

    for module_name, aulas_list in items_to_transcribe.items():
        for aula in aulas_list:
            if check_cancellation():
                logger.warning("Transcri√ß√£o cancelada pelo usu√°rio")
                return False

            try:
                # Atualizar progresso
                remaining_items = len(missing_transcriptions) - completed
                eta = int((remaining_items * estimated_time) /
                          len(missing_transcriptions))

                progress_tracker.update_phase_progress(
                    completed,
                    f"{aula['stem']}.mp4",
                    eta
                )

                # Usar fun√ß√£o de transcri√ß√£o existente
                from transcriber import transcrever_videos
                single_item = {module_name: [aula]}

                # Transcrever arquivo individual
                result = transcrever_videos(
                    single_item,
                    modelo=st.session_state.get('whisper_model', 'small'),
                    tipo_audio='mp3',
                    deletar_audio=True
                )

                completed += 1
                logger.success(f"Transcrito: {aula['stem']}")

            except Exception as e:
                error_msg = f"Erro ao transcrever {aula['stem']}: {str(e)}"
                logger.error(error_msg, traceback.format_exc()[:200])
                errors.append(error_msg)
                completed += 1  # Continuar mesmo com erro

    # Relat√≥rio final da transcri√ß√£o
    if errors:
        logger.warning(f"Transcri√ß√£o conclu√≠da com {len(errors)} erros")
        for error in errors[:5]:  # Mostrar at√© 5 erros
            logger.error(error)
    else:
        logger.success("Todas as transcri√ß√µes conclu√≠das com sucesso!")

    return True


def process_ai_orchestrated(modulos_mapeados: Dict, base_path: Path, gpt_model: str,
                            progress_tracker: AdvancedProgressTracker,
                            logger: ProcessingLogger) -> bool:
    """Processa an√°lises de IA com progresso avan√ßado."""

    # Contar itens para processar
    total_texts = 0
    for aulas_list in modulos_mapeados.values():
        for aula in aulas_list:
            if aula.get('txt_path') and Path(aula['txt_path']).exists():
                total_texts += 1

    if total_texts == 0:
        logger.warning("Nenhum texto encontrado para an√°lise de IA")
        return True

    # Estimar tempo
    estimated_time = TimeEstimator.estimate_ai_time(total_texts)
    logger.info(f"Iniciando an√°lise de IA para {total_texts} textos")
    logger.info(
        f"Tempo estimado: {estimated_time//60}m {estimated_time % 60}s")

    progress_tracker.start_phase(4, total_texts * 3)  # 3 an√°lises por texto

    # Importar fun√ß√µes de IA
    from llm_processor import generate_summary, extract_keywords_and_insights, generate_quiz_questions

    completed_analyses = 0
    total_analyses = total_texts * 3
    errors = []

    # Processar cada texto
    for module_name, aulas_list in modulos_mapeados.items():
        for aula in aulas_list:
            if check_cancellation():
                logger.warning("An√°lise de IA cancelada pelo usu√°rio")
                return False

            txt_path = aula.get('txt_path')
            if not txt_path or not Path(txt_path).exists():
                continue

            aula_stem = aula['stem']

            try:
                # Carregar texto
                with open(txt_path, 'r', encoding='utf-8') as f:
                    texto = f.read().strip()

                if not texto:
                    logger.warning(f"Arquivo vazio: {aula_stem}")
                    completed_analyses += 3
                    continue

                # 3 an√°lises por texto
                analyses = [
                    ("Resumo", generate_summary),
                    ("Insights", extract_keywords_and_insights),
                    ("Question√°rio", generate_quiz_questions)
                ]

                for analysis_name, analysis_func in analyses:
                    if check_cancellation():
                        return False

                    try:
                        # Atualizar progresso
                        remaining = total_analyses - completed_analyses
                        eta = int((remaining * estimated_time) /
                                  total_analyses)

                        progress_tracker.update_phase_progress(
                            completed_analyses,
                            f"{analysis_name}: {aula_stem}",
                            eta
                        )

                        # Gerar an√°lise
                        if analysis_name == "Question√°rio":
                            result = analysis_func(
                                texto, aula_stem, base_path, module_name,
                                num_questions=5, model=gpt_model
                            )
                        else:
                            result = analysis_func(
                                texto, aula_stem, base_path, module_name,
                                model=gpt_model
                            )

                        if result and not result.startswith("Erro"):
                            logger.success(
                                f"{analysis_name} gerado: {aula_stem}")
                        else:
                            logger.error(f"Falha {analysis_name}: {aula_stem}")
                            errors.append(f"{analysis_name} - {aula_stem}")

                        completed_analyses += 1
                        # Pequena pausa para n√£o sobrecarregar API
                        time.sleep(0.1)

                    except Exception as e:
                        error_msg = f"Erro {analysis_name} {aula_stem}: {str(e)}"
                        logger.error(error_msg)
                        errors.append(error_msg)
                        completed_analyses += 1

            except Exception as e:
                error_msg = f"Erro geral ao processar {aula_stem}: {str(e)}"
                logger.error(error_msg)
                errors.append(error_msg)
                completed_analyses += 3  # Pular todas as an√°lises deste arquivo

    # Relat√≥rio final
    if errors:
        logger.warning(f"An√°lise de IA conclu√≠da com {len(errors)} erros")
    else:
        logger.success("Todas as an√°lises de IA conclu√≠das com sucesso!")

    return True


def process_everything_orchestrated(modulos_mapeados: Dict, base_path: Path, gpt_model: str) -> bool:
    """Fun√ß√£o principal orquestrada - GERAR TUDO COMPLETO."""

    # Inicializar componentes
    logger = ProcessingLogger()
    progress_tracker = AdvancedProgressTracker(4)

    # Container para cancelamento
    cancel_container = st.empty()

    try:
        logger.info("üöÄ Iniciando processamento completo orquestrado")

        # FASE 1: AN√ÅLISE INICIAL
        progress_tracker.start_phase(1)
        progress_tracker.update_phase_progress(0, "Analisando arquivos...")

        missing_transcriptions = identify_missing_transcriptions(
            modulos_mapeados)

        # Mostrar bot√£o de cancelamento
        with cancel_container.container():
            if st.button("üõë Cancelar Processamento", key="cancel_btn", type="secondary"):
                st.session_state.cancel_processing = True

        logger.info(
            f"Encontrados {len(missing_transcriptions)} v√≠deos para transcrever")

        # FASE 2: TRANSCRI√á√ÉO (se necess√°rio)
        if missing_transcriptions:
            success = transcribe_videos_orchestrated(
                missing_transcriptions, progress_tracker, logger
            )
            if not success:
                return False

            # Atualizar mapeamento
            modulos_mapeados = update_modulos_after_transcription(
                modulos_mapeados, base_path)

            # Invalidar cache
            from app import cached_mapear_modulos
            cached_mapear_modulos.clear()
        else:
            logger.info("Nenhuma transcri√ß√£o necess√°ria")

        # FASE 3: PROCESSAMENTO DE DOCUMENTOS (se implementado)
        progress_tracker.start_phase(3)
        progress_tracker.update_phase_progress(0, "Verificando documentos...")
        logger.info("Documentos j√° processados na detec√ß√£o inicial")

        # FASE 4: AN√ÅLISE DE IA
        success = process_ai_orchestrated(
            modulos_mapeados, base_path, gpt_model, progress_tracker, logger
        )
        if not success:
            return False

        # CONCLUS√ÉO
        progress_tracker.complete()
        logger.success("üéâ Processamento completo finalizado com sucesso!")

        return True

    except Exception as e:
        logger.error(
            f"Erro cr√≠tico no processamento: {str(e)}", traceback.format_exc())
        return False

    finally:
        # Limpar estado de cancelamento
        if 'cancel_processing' in st.session_state:
            del st.session_state.cancel_processing
        cancel_container.empty()


def render_orchestrated_interface(modulos_mapeados: Dict, base_path: Path, gpt_model: str):
    """Renderiza interface do processamento orquestrado."""

    st.markdown("### üöÄ Processamento Completo Orquestrado")

    # An√°lise pr√©via
    missing_transcriptions = identify_missing_transcriptions(modulos_mapeados)
    total_texts = sum(1 for aulas_list in modulos_mapeados.values()
                      for aula in aulas_list
                      if aula.get('txt_path') and Path(aula['txt_path']).exists())

    # Estimativas
    transcription_time = TimeEstimator.estimate_transcription_time(
        [aula['video_path'] for _, aula in missing_transcriptions]
    ) if missing_transcriptions else 0

    ai_time = TimeEstimator.estimate_ai_time(total_texts)
    total_estimated_time = transcription_time + ai_time

    # Preview do que ser√° processado
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            "üéôÔ∏è V√≠deos para Transcrever",
            len(missing_transcriptions),
            f"~{transcription_time//60}m"
        )

    with col2:
        st.metric(
            "üìù Textos para Analisar",
            total_texts,
            f"~{ai_time//60}m"
        )

    with col3:
        st.metric(
            "‚è±Ô∏è Tempo Total Estimado",
            f"{total_estimated_time//60}m",
            f"{total_estimated_time % 60}s"
        )

    # Bot√£o principal
    if st.button(
        "üéØ GERAR TUDO - Processamento Completo",
        use_container_width=True,
        type="primary",
        help="Transcreve v√≠deos pendentes + Gera todas as an√°lises de IA"
    ):
        if total_estimated_time > 600:  # Mais de 10 minutos
            st.warning(
                f"‚ö†Ô∏è Processamento estimado: {total_estimated_time//60} minutos. Recomendado n√£o fechar o navegador.")

        success = process_everything_orchestrated(
            modulos_mapeados, base_path, gpt_model)

        if success:
            st.balloons()
            st.success(
                "üéâ Processamento completo finalizado! Verifique os logs para detalhes.")
        else:
            st.error(
                "‚ùå Processamento interrompido. Verifique os logs para detalhes.")

    # Renderizar logs sempre
    logger = ProcessingLogger()
    logger.render_logs()

    # Bot√£o para limpar logs
    if st.button("üßπ Limpar Logs", key="clear_logs_btn"):
        logger.clear_logs()
        st.rerun()
